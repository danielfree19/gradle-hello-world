# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master
variables:
- name: version
   
pool:
  vmImage: ubuntu-latest

steps:
- displayName: 'Fetch jar version'
  name: 'FetchJarVersion'
  script: |
    version=$(cat build.gradle.kts | grep 'version =' | awk '{print $3}' | tr -d \")
    echo "##vso[task.setvariable variable=version;]$version"  

- name: 'debug'
  displayName: 'Debug Variables'
  script: |
    echo "Version: $(version)"
    echo "JAVA_HOME: $JAVA_HOME"
    echo "PATH: $PATH"
    echo "${version}"

- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'  # Path to your Gradle wrapper
    tasks: 'build'  # Replace with the tasks you want to run
    options: '' 
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'  # Updated pattern for test result files
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'  # Replace with your JDK version
    jdkArchitectureOption: 'x64'
