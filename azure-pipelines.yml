# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master
variables:
- name: version
   
pool:
  vmImage: ubuntu-latest

steps:
- script: |
    version=$(cat build.gradle.kts | grep 'version =' | awk '{print $3}' | tr -d \")
    patch_version=$(echo $version | cut -d'.' -f3)
    minor_version=$(echo $version | cut -d'.' -f2)
    major_version=$(echo $version | cut -d'.' -f1)
    
    echo "Extracted version: $version"
    echo "Major version: $major_version"
    echo "Minor version: $minor_version"
    echo "Patch version: $patch_version"
    
    patch_version=$((patch_version + 1))
    
    if [ $patch_version -gt 9 ]; then
      patch_version=0
      minor_version=$((minor_version + 1))
      # if minor version exceeds 9, increment major version and reset minor version
      if [ $minor_version -gt 9 ]; then
        minor_version=0
        major_version=$((major_version + 1))
      fi
    fi
    sed -i "s/version = \"$version\"/version = \"$major_version.$minor_version.$patch_version\"/" build.gradle.kts
    version="$major_version.$minor_version.$patch_version"
    cat build.gradle.kts
    echo "New version: $version"
    echo "##vso[task.setvariable variable=version;]$version"
  displayName: 'Extract version from build.gradle.kts'

- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'  # Path to your Gradle wrapper
    tasks: 'build'  # Replace with the tasks you want to run
    options: '--no-daemon' 
